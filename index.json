[{"authors":null,"categories":null,"content":"Artyom S. Babenko is studying in the direction of Fundamental Computer Science and Information Technology at the Peoples’ Friendship University of Russia. His interests include playing volleyball, reading books and learning English.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Artyom S. Babenko is studying in the direction of Fundamental Computer Science and Information Technology at the Peoples’ Friendship University of Russia. His interests include playing volleyball, reading books and learning English.","tags":null,"title":"Artyom S. Babenko","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://example.com/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Babenko A.S."],"categories":[],"content":"Upstart is an OS initialization system that controls the launch of daemons during system boot, their stopping, and their management while the system is running. It is an event-based replacement for the init initialization system in UNIX and Linux systems. It was originally developed for the Ubuntu distribution, but later became used in other Linux distributions, such as Fedora (later replaced by systemd), as a replacement for UNIX System V init. Since 2014, Upstart has been in maintenance mode only, with no new features being developed. It is now recognized as obsolete and a switch to systemd is planned for many distributions. UpStart is a hybrid initialization system, it uses both SysV startup scripts and Systemd service files. Most of its features work due to integration with Systemd initialization system. Recently, fewer and fewer SysV init scripts are being used and more and more Systemd unit files are being used. Sooner or later, Systemd will displace and completely replace Upstart in Ubuntu. Tasks can be started and stopped with the start and stop programs located in the /sbin directory. Each of these programs must be parameterized with a list of tasks to be processed. Both programs provide the results of their work to the standard output stream. The program status, as the name suggests, lets you know the status of the task. It displays first the name of the task, then the last operation performed on the task (start/stop), the current state and the process identifier, if any. You can get a list of all tasks and their statuses at the moment using initctl list command. With the initctl emit command you have the possibility to generate any event. This is very useful when writing your own jobs. System processes are stored in /etc/init/ directory, and user processes are stored in ~/.init/ directory. User workflows are started in their sessions. Such processes are not system-wide. All processes regardless of their type are always defined in a configuration file (.conf), where their name should represent the service or task to be performed. A process in the post-start state is considered a running process. It remains running until the pre-stop state, in which it prepares to stop. After that the process is stopped and goes to the post-stop state (system cleanup). Upstart is an event-based provisioning system developed by Canonical and designed to replace SysV. It can start system services, perform various tasks on them, inspect them at runtime, and take actions in response to system events. Most of its features work through integration with the Systemd provisioning system. ","date":1654342538,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654342538,"objectID":"5c85ee0a0cbb6393ca3d99954ecea932","permalink":"https://example.com/post/upstart/","publishdate":"2022-06-04T14:35:38+03:00","relpermalink":"/post/upstart/","section":"post","summary":"Upstart is an OS initialization system that controls the launch of daemons during system boot, their stopping, and their management while the system is running. It is an event-based replacement for the init initialization system in UNIX and Linux systems.","tags":[],"title":"Upstart","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"My last week It’s been a tough week for me. The first year of university is coming to an end, grades will be given out soon, I need to turn in my outstanding work. I did the report, the last lab work on the subject, as well as the last stage of the individual project. However, I still managed to have some fun, as my friends and I went for a walk in the park. We rode on swings, ate cotton candy, and rode bicycles. Result of the week I think it was a very productive week, I finished all the lab work and finished the project. ","date":1654341453,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654341453,"objectID":"c2e427164d24cbac4cc41e7784105bef","permalink":"https://example.com/post/last_week5/","publishdate":"2022-06-04T14:17:33+03:00","relpermalink":"/post/last_week5/","section":"post","summary":"In this post I would like to tell you about my last week.","tags":[],"title":"Last_week5","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"Introduction The progress of computer technology has determined the process of appearance of new various sign systems for recording algorithms - programming languages. The meaning of the emergence of such a language - equipped with a set of computational formulas of additional information, turns this set into an algorithm. Programming language - a formal sign system designed to record computer programs. A programming language defines a set of lexical, syntactic and semantic rules that define the appearance of the program and the actions that the executor (computer) will perform under its control. Since the creation of the first programmable machines mankind has come up with more than eight and a half thousand programming languages. Every year their number is replenished with new ones. Some languages are only used by a small number of their own developers, others are known to millions of people. Professional programmers sometimes use more than a dozen different programming languages in their work. Programming languages The entire set of programming languages can be divided into two groups: low-level languages and high-level languages. The low-level languages are assembly languages (from English to assemble). An assembler language uses symbolic notation of commands that are easy to understand and quick to remember. Instead of binary command sequences, symbolic designations are written as instructions and instead of binary addresses of data used in execution of instructions, symbolic names of this data are written as chosen by the programmer. Assembler language is sometimes called mnemocode or autocode. Most programmers use high-level languages to write programs. Like a normal human language, such a language has its own alphabet - a set of symbols used in the language. From these characters are compiled what are called keywords of the language. Each of the keywords performs a different function, just as in a language we are accustomed to, words composed of the letters of the alphabet of a given language can perform the functions of different parts of speech. Keywords are linked together into sentences according to certain syntactic rules of the language. Each sentence defines a certain sequence of actions to be performed by a computer. A higher-level language acts as an intermediary between humans and computers, allowing humans to communicate with computers in a more human-readable way. Often such a language helps to choose the right method to solve a problem. Before writing a program in a high-level language, a programmer must create an algorithm for solving the problem, that is, a step-by-step plan of action to be performed to solve this problem. This is why languages that require an algorithm to be compiled in advance are often called algorithmic languages. Assembler The Assembler language is a symbolic representation of a machine language. It makes programming easier than programming in machine codes. The programmer does not have to use the real addresses of the memory cells with the data in them, involved in the operation, and the calculated results, as well as the addresses of the commands that the program does not address. Some tasks, for example, exchange with non-standard data processing devices of complex structures cannot be solved with the help of high-level programming languages. The Assembler language is a machine language. And the programmer realizing any task in high-level languages, with the help of Assembler can determine whether the solution to this problem is meaningful, in terms of using the computer. The ability to make sense of the Assembler language makes it easier to find errors in programs because some languages are compilers. Lisp Lisp The second oldest programming language, Lisp (List Information Symbol Processing), was developed by J. McCarthy in 1962 to handle strings of symbols rather than numbers. This particular purpose of Lisp opened for programmers a new field of activity known today as “artificial intelligence”. Currently, Lisp is successfully used in expert systems, analytical computing systems, etc. The vast area of possible applications of Lisp caused the emergence of many different dialects of Lisp, this led to the creation of the Common LISP Committee in the early 1980s, which was to select the most appropriate Lisp dialect and propose it as the basic one. This dialect, chosen by the Committee in 1985, was called Common LISP. It has since been adopted by US universities, as well as many developers of artificial intelligence systems, as the basic dialect of the language Lisp. Initially Lisp was conceived as a theoretical tool for recursive constructions, but today it has become a powerful tool that provides the programmer with a variety of support, allowing him to quickly build prototypes of very, very serious systems. Professor J. Samman of the Massachusetts Institute of Technology noted that the mathematical clarity and ultimate clarity of Lisp is not all. The main …","date":1653717205,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653717205,"objectID":"f2fc1178eae09a83b84233ab4a51f481","permalink":"https://example.com/post/scientifi%D1%81_programming_languages/","publishdate":"2022-05-28T08:53:25+03:00","relpermalink":"/post/scientifi%D1%81_programming_languages/","section":"post","summary":"Introduction The progress of computer technology has determined the process of appearance of new various sign systems for recording algorithms - programming languages. The meaning of the emergence of such a language - equipped with a set of computational formulas of additional information, turns this set into an algorithm.","tags":[],"title":"Scientifiс programming languages","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"My last week This week was not as busy as the previous ones. This week we had the last physical education and English classes. I have done a lot of laboratory work, shot a lot of video reports. I’ve watched a lot of videos on youtube. That’s how my week went. Result of the week I think this week has been less productive than others. This week I rested more, watched videos on the internet and slept. ","date":1653717145,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653717145,"objectID":"aa072bc3c4372b11619b699d37052449","permalink":"https://example.com/post/mylastweek4/","publishdate":"2022-05-28T08:52:25+03:00","relpermalink":"/post/mylastweek4/","section":"post","summary":"In this post I would like to tell you about my last week.","tags":[],"title":"My last week","type":"post"},{"authors":null,"categories":null,"content":"In the subject “Operating Systems” I had to do a project - to create a personal website. The project consisted of 6 stages, each of which was allocated a week. During the stages I had to write and create posts on various topics, add information about myself, and so on. Stages of the project:cd 1) Posting on Github pages the blanks for the personal site. 2) Add data about yourself to the site. Make a post on the last week and make a post on a topic of choice. 3) Add an accomplishments to the site. Make a post on the last week and make a post on a topic of choice. 4) Add links to scholarly and bibliometric resources to the site. Make a post on the last week and make a post on a topic of choice. 5) Add all other elements to the site. Make a post on the last week and make a post on a topic of choice. 6) Post a bilingual site on Github. Make a post on the last week and make a post on a topic of choice (bilingually). ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://example.com/project/example/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"Creating a website","tags":["Deep Learning"],"title":"Individual project \"Personal site of a researcher\"","type":"project"},{"authors":["Babenko A.S."],"categories":[],"content":"Introduction All of us have at least once got to a performance with an impossibly boring presentation. The slides were overloaded with information, the speech was monotonous, there was snuffling in the hall. The content of such speeches disappears from memory a minute after the start. But not all presentations are like that. Some do not get out of my head for weeks, and the words from them inspire me to act. A good presentation is understandable even to a child, beautifully designed, and combined with a strong idea can change the world. How to make a beautiful and interesting presentation? Easier than it looks. You don’t need to be a designer or Steve Jobs to do this, it’s enough to follow the simple rules and tricks from this article. With them, you will be able to inspire, convey ideas and convince people through presentations. And if time is tight, use ready—made Canva templates - much of what we are talking about below is already there. How to prepare for the presentation? Before you sit down at the editor, ask yourself a few questions: Who is your audience? What is the main idea of the presentation? How will you prove it? What should people understand and do after your words? The better you prepare before the speech, the more accurate your message will be. Even if the presentation is watched online, studying the recipients and working on the structure will not be in vain. The main idea Good presentations always have a main idea that runs through the whole performance like a red thread. It can be a call, a push to a decision, or a plan. Without a clear idea, presentations get messy and confusing, and it can be difficult for listeners to understand what the author wanted to say. The main idea should be short, simple and memorable. As a motto or slogan. The dream is the most important part of any presentation After you find and isolate the central idea, you will understand how to create a presentation around it. Check each slide with a question: “Why is it important for the idea?” So everything that does not help to reveal the idea will simply remain behind the scenes. Structure Sometimes even strong ideas get lost in presentations with a chaotic structure. To prevent this from happening, sort everything out in advance. Here are a few ways by which you can interestingly convey the main idea: Start with a little provocation (bang); Point to a problem (gap); Provide evidence and propose a solution (main thoughts); Tell a story and call for action; Explain the complex according to the principle of “Explain like I’m 5”; Give brief conclusions and motivation to work with them (wrap up). It is not necessary to take all six methods into the presentation, any three will be enough for a good presentation. How to make a cool presentation? Now that the audience is in complete order with ideas and content, you can finally take up the slides! But first, a few hints. Don’t forget the rule “one slide — one thought”; Choose sans-serif fonts; Write large; Use bright talking photos; Choose cool templates. How to tell a presentation? If you have recognized the audience, formulated the message and told it by simple means, then your presentation is already cooler than anything that can be found on the Internet. You can try to go further and figure out how to make the presentation even better due to the steep pitch. Rehearse your speech; Speak slowly; Try to keep within 10 minutes; Use slides as a background; Learn from the best. ","date":1653107215,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653107215,"objectID":"85be7a66d4732bff66807ee800f50862","permalink":"https://example.com/post/creating_presentations/","publishdate":"2022-05-21T07:26:55+03:00","relpermalink":"/post/creating_presentations/","section":"post","summary":"Introduction All of us have at least once got to a performance with an impossibly boring presentation. The slides were overloaded with information, the speech was monotonous, there was snuffling in the hall.","tags":[],"title":"Creating presentations","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"My last week This week turned out to be diverse. I did a lot of things for my studies, but I also did not forget about recreation and entertainment. My friend had a birthday and we went on a horror quest. We got unforgettable emotions. Then we ate pizza and walked in Gorky Park until nightfall. Result of the week I think this week has been productive. I was able to find a balance between studying and relaxing, so the week turned out great. ","date":1653106388,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653106388,"objectID":"7679dc8496a97e10a8c3e6e461f6221b","permalink":"https://example.com/post/lastweek3/","publishdate":"2022-05-21T07:13:08+03:00","relpermalink":"/post/lastweek3/","section":"post","summary":"In this post I would like to tell you about my week.","tags":[],"title":"Last week","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"Introduction Markdown is a text markup language created by writer and blogger John Gruber. It is designed to create beautifully designed texts in ordinary TXT format files. You don’t need bulky processors like Word or Pages to create documents with bold or italics, citations, links, and even tables. It is enough to remember the simple rules of Markdown, and you can write even in a “Notebook”. Although specialized Markdown editors are, of course, much more convenient. Where can I use Markdown Notes: The Markdown editor with a file panel (for example, Atom or iA Writer) is quite a worthy alternative to Evernote and OneNote. We have already written why Markdown is good for organizing your database of notes. Drafts for the blog: This markup language is compatible with a bunch of online editors and blog platforms. You can write a draft for your blog in Markdown, and then publish it in seconds — all links, titles and formatting will look as you intended. This is not for you to copy from Word. Task lists: It is very easy to create shopping lists, to-do lists, and work assignments in Markdown editors. Some geeks use a plain text file todo.txt as an alternative to the fashionable Wunderlist and Todoist. How to do this, you can find out on the website Todo.txt . Messengers: Even some messengers support Markdown. For example, in Telegram, you can use it to apply bold or italic highlighting. Advantages of Markdown Versatility: Documents written using Markdown syntax are plain text TXT files. They can be opened on any platform and in any editor. In this way they differ favorably from files created in word processors. Have you tried opening a document from Apple Pages in Word? Simplicity: Markdown is so simple that even those who have not heard about all your Latex and HTML before will be able to master it in 10 minutes. Grids for subheadings, asterisks for highlighting, dashes for lists. It couldn’t be simpler. A large selection: of Editing tools for working with Markdown documents is very, very much. There are online, mobile, and desktop tools. There is a monstrous Atom, beautiful and minimalistic ghostwriter and iA Writer, Vim for geeks and Ulysses for professional writers. I don’t want to choose. Convertibility: Markdown documents can be easily exported to any formats: PDF, DOC, ODT. At the same time, their formatting remains unchanged. Disadvantages of Markdown Limited formatting: Since Markdown documents are just text files, you can’t use beautiful fonts in them. After all, it is more of a tool for writing drafts than for full-fledged layout. Strict rules: In Markdown, the text is formatted using service characters. One extra character * or #, and the formatting will change. So when typing texts in Markdown, you will have to be careful. Applications for Markdown You can easily choose your favorite text editor from our selection. Atom is considered one of the best for Markdown — it is good for its incredible flexibility and versatility. It works on Windows, macOS and Linux and has a huge number of themes and extensions. It is very easy to assemble a dream editor from it. MacOS users should pay attention to the beautiful and convenient editors iA Writer, Write and Byword. ","date":1652543724,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652543724,"objectID":"a0ade9b4b218a8a455292eee739b86e8","permalink":"https://example.com/post/markdown/","publishdate":"2022-05-14T18:55:24+03:00","relpermalink":"/post/markdown/","section":"post","summary":"Introduction Markdown is a text markup language created by writer and blogger John Gruber. It is designed to create beautifully designed texts in ordinary TXT format files. You don’t need bulky processors like Word or Pages to create documents with bold or italics, citations, links, and even tables.","tags":[],"title":"Markdown","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"My last week This week I did all the things I planned to do. I did all the lab work, solved the tests, did my homework in English. In addition, I did not forget about the rest. My friends and I went to the trampoline park. Result of the week I think this week has been productive. I completed all the tasks and had time to rest, relax and sleep a lot. I hope next week will be no less productive. ","date":1652543627,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652543627,"objectID":"a8e7b8b45d56bfa1ba4e0b6e9f564688","permalink":"https://example.com/post/last_week2/","publishdate":"2022-05-14T18:53:47+03:00","relpermalink":"/post/last_week2/","section":"post","summary":"In this post I would like to tell you about my last week.","tags":[],"title":"My last week","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"Introduction The speed and quality of product assembly are the main competitive advantages in software development. Therefore, a new concept of CI/CD — Continuous integration and Continuous delivery – continuous integration and continuous delivery - began to replace archaic programming models, such as imperative, structural or modular. It helps to minimize errors, increase the pace of assembly and the quality of the product being developed. What is CI/CD CI/CD is one of the DevOps practices that implies continuous integration and delivery. This set of principles is designed to improve the convenience, frequency, and reliability of deploying software or product changes. CI/CD refers to agile practices and allows developers to pay attention to the implementation of business requirements, code quality and product security. CI/CD Goals: providing a consistent and automated way to assemble, package, and test products or applications;automation of deployment in different environments; minimizing errors and problems. CI/CD Principles There are four guiding principles for CI/CD. 1)Division of responsibility. Each of the participants in the process shares responsibility for certain stages of the product life cycle. Business logistics is being designed, end-to-end functions are being implemented, acceptance tests are being conducted and code logistics is being organized. 2)Risk reduction. Each team involved in product development strives to reduce risks — the correctness of business logistics is monitored, user experience is checked, data storage and processing are improved, and so on. 3)Shortening the feedback loop. The developer and the client should strive to increase the speed of making changes and approving edits. Code assembly and testing can be automated. And for situations where human participation is required, it is possible to minimize the number of information intermediaries. 4)Implementation of the environment. Developers should have a common workspace with the main and auxiliary branches for version control and quality, acceptability, fault tolerance, etc. CI/CD Stages The CI/CD methodology involves dividing the development process into seven stages. 1)Writing code. Developers write the code of their module and conduct manual testing. After that, the result of the work is connected in the main branch with the current version of the project. After all the module codes are published in the main branch, the second stage begins. 2)Assembling. The selected version control system initiates the automatic build and subsequent testing of the project. Triggers for activating the build can be configured independently. Jenkins or another tool is used to automate the assembly. 3)Manual testing. After the CI system checks the operability of the test version, the code is transmitted for manual investigation. 4)Release. After manual testing, corrections are made to the assembly. Next comes the release of the code version for customers. 5)Deployment. At this stage, the current (working) version of the code is hosted on the developer’s production servers. The client can interact with the program and learn its functions. 6)Support and monitoring. The product begins to be used by end users. At the same time, the developers continue to support it and analyze the user experience. 7)Planning. Based on user experience, new functionality is being developed and a plan of improvements is being prepared. After that, the developer starts writing code — and the cycle closes. Pros and cons of CI/CD The minimum time from the client’s request to launch into use. The methodology reduces the time for launching updates to several days (in some cases, weeks). Thanks to this, developers get the opportunity to test innovations faster and implement solutions faster than competitors. The ability to check options. Operational testing and many iterations help the developer to quickly identify options that have no prospects, even at the initial stages. The quality of the result. Conducting automated testing helps to identify errors and other problems at the earliest stages of development. With the standard release approach, this is difficult or impossible to do. Experience requirements. In theory, all corporate IT systems can be transferred to CI/CD. But in practice, to get a result, you need primary experience with the methodology, as well as the correct organization of the restructuring of all processes. The complexity of ensuring interaction. Continuous updating and continuous delivery should be clearly coordinated, which is possible only after careful adjustment of interaction between specialists at all levels. CI/CD — hype or necessity? CI/CD is one of the hype software development methodologies. For the first time the idea of its implementation was announced in 2006, and already in 2008, experts expressed the opinion that its popularity is associated with the development of cloud services. At the same time, the desire to use it to solve …","date":1651897757,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651897757,"objectID":"af20b768cd941fe42e989e01f9fdf70a","permalink":"https://example.com/post/tema2/","publishdate":"2022-05-07T07:29:17+03:00","relpermalink":"/post/tema2/","section":"post","summary":"Introduction The speed and quality of product assembly are the main competitive advantages in software development. Therefore, a new concept of CI/CD — Continuous integration and Continuous delivery – continuous integration and continuous delivery - began to replace archaic programming models, such as imperative, structural or modular.","tags":[],"title":"Continuous Integration and Continuous Deployment","type":"post"},{"authors":["Babenko A.S."],"categories":[],"content":"My last week For this week i made almost all things which I planned. I have done all the laboratory work in several subjects, went to the amusement park with my friends, read a new detective book and watched an interesting film called “Bird box”. Of all the planned things, I could not only study English. Result of the week To my mind, that week was pretty productive for me. I didn’t have time to do only one planned thing. I think, that situation happened because I spent in social media so much time. So that this does not happen again, I must keep track of time which i waste in social media. ","date":1651894597,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651894597,"objectID":"72c233ac6818dc5afbf1d336d3768dca","permalink":"https://example.com/post/my-last-week1/","publishdate":"2022-05-07T06:36:37+03:00","relpermalink":"/post/my-last-week1/","section":"post","summary":"In this post I will tell you how my last week went.","tags":[],"title":"My last week","type":"post"},{"authors":["Artyom S. Babenko","吳恩達"],"categories":["Demo","教程"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://example.com/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne \rTwo \rThree \r A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Artyom S. Babenko","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://example.com/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]