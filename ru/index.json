[{"authors":null,"categories":null,"content":"Артём Бабенко учится на направлении “Фундаментальная информатика и информационные технологии” в Российском университете дружбы народов. Среди его интересов - игра в волейбол, чтение книг и изучение английского языка.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Артём Бабенко учится на направлении “Фундаментальная информатика и информационные технологии” в Российском университете дружбы народов. Среди его интересов - игра в волейбол, чтение книг и изучение английского языка.","tags":null,"title":"Артём Сергеевич Бабенко","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://artyombabenko.github.io/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"Пример выступления с использованием функции Wowchemy Markdown slides.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Бабенко А.С."],"categories":[],"content":"Upstart - это система инициализации ОС, которая контролирует запуск демонов во время загрузки системы, их остановку и управление ими во время работы системы. Это основанная на событиях замена системы инициализации init в системах UNIX и Linux. Первоначально он был разработан для дистрибутива Ubuntu, но позже стал использоваться в других дистрибутивах Linux, таких как Fedora (позже заменен systemd), как замена UNIX System V init. С 2014 года Upstart находится только в режиме обслуживания, без разработки новых функций. Сейчас он признан устаревшим, и во многих дистрибутивах планируется переход на systemd. UpStart - это гибридная система инициализации, она использует как стартовые скрипты SysV, так и служебные файлы Systemd. Большинство ее возможностей работает благодаря интеграции с системой инициализации Systemd. В последнее время все меньше и меньше используется SysV init scripts и все больше и больше Systemd unit files. Рано или поздно Systemd вытеснит и полностью заменит Upstart в Ubuntu. Задачи могут быть запущены и остановлены с помощью программ start и stop, расположенных в каталоге /sbin. Каждая из этих программ должна быть параметризована списком задач, которые необходимо обработать. Обе программы выдают результаты своей работы в стандартный поток вывода. Статус программы, как следует из названия, позволяет узнать состояние задачи. Она отображает сначала имя задачи, затем последнюю операцию, выполненную над задачей (старт/стоп), текущее состояние и идентификатор процесса, если таковой имеется. Список всех задач и их статусов на данный момент можно получить с помощью команды initctl list. С помощью команды initctl emit у вас есть возможность генерировать любое событие. Это очень полезно при написании собственных заданий. Системные процессы хранятся в каталоге /etc/init/, а пользовательские процессы - в каталоге ~/.init/. Рабочие процессы пользователей запускаются в их сеансах. Такие процессы не являются общесистемными. Все процессы, независимо от их типа, всегда определяются в конфигурационном файле (.conf), где их имя должно представлять выполняемую службу или задачу. Процесс в состоянии после запуска считается запущенным процессом. Он остается запущенным до состояния pre-stop, в котором он готовится к остановке. После этого процесс останавливается и переходит в состояние post-stop (очистка системы). Upstart - это система инициализации на основе событий, разработанная компанией Canonical и призванная заменить SysV. Она может запускать системные службы, выполнять различные задачи, проверять их во время выполнения и предпринимать действия в ответ на системные события. Большинство ее функций работает благодаря интеграции с системой инициализации Systemd. ","date":1654342538,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1654342538,"objectID":"5c85ee0a0cbb6393ca3d99954ecea932","permalink":"https://artyombabenko.github.io/ru/post/upstart/","publishdate":"2022-06-04T14:35:38+03:00","relpermalink":"/ru/post/upstart/","section":"post","summary":"Upstart - это система инициализации ОС, которая контролирует запуск демонов во время загрузки системы, их остановку и управление ими во время работы системы. Это основанная на событиях замена системы инициализации init в системах UNIX и Linux.","tags":[],"title":"Upstart","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"My last week Эта неделя была трудной для меня. Первый курс университета подходит к концу, скоро будут выставлять баллы, нужно сдавать задолженные работы. Я сделал доклад, последние лабораторные работы по данному предмету, а также последний этап индивидуального проекта. Однако я все-таки успел развлечься, так как мы с друзьями ходили гулять в парк. Мы покатались на качелях, поели сахарную вату, покатались на велосипедах. Result of the week Я считаю что эта неделя была очень продуктивной, я доделал все лабораторные работы и закончил проект. ","date":1654341453,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1654341453,"objectID":"c2e427164d24cbac4cc41e7784105bef","permalink":"https://artyombabenko.github.io/ru/post/last_week5/","publishdate":"2022-06-04T14:17:33+03:00","relpermalink":"/ru/post/last_week5/","section":"post","summary":"В этом посте я расскажу о том, как прошла моя неделя.","tags":[],"title":"Моя прошлая неделя","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"Введение Прогресс компьютерной техники определил процесс появления новых разнообразных знаковых систем для записи алгоритмов - языков программирования. Смысл появления такого языка - оснащение набора вычислительных формул дополнительной информацией, превращение этого набора в алгоритм. Язык программирования - формальная знаковая система, предназначенная для записи компьютерных программ. Язык программирования задает набор лексических, синтаксических и семантических правил, определяющих внешний вид программы и действия, которые исполнитель (компьютер) будет выполнять под ее управлением. С момента создания первых программируемых машин человечество придумало более восьми с половиной тысяч языков программирования. Каждый год их число пополняется новыми. Некоторые языки используются лишь небольшим числом собственных разработчиков, другие известны миллионам людей. Профессиональные программисты иногда используют в своей работе более десятка различных языков программирования. Языки программирования Все множество языков программирования можно разделить на две группы: языки низкого уровня и языки высокого уровня. Языки низкого уровня - это языки ассемблера (от английского - собирать). Язык ассемблера использует символическую нотацию команд, которые легко понять и быстро запомнить. Вместо двоичных последовательностей команд в качестве инструкций записываются символьные обозначения, а вместо двоичных адресов данных, используемых при выполнении инструкций, записываются символьные имена этих данных по выбору программиста. Язык ассемблера иногда называют мнемокодом или автокодом. Большинство программистов используют языки высокого уровня для написания программ. Как и обычный человеческий язык, такой язык имеет свой алфавит - набор символов, используемых в языке. Из этих символов составляются так называемые ключевые слова языка. Каждое из ключевых слов выполняет свою функцию, подобно тому, как в привычном нам языке слова, составленные из букв алфавита данного языка, могут выполнять функции различных частей речи. Ключевые слова соединяются в предложения в соответствии с определенными синтаксическими правилами языка. Каждое предложение определяет определенную последовательность действий, которые должен выполнить компьютер. Язык более высокого уровня выступает в качестве посредника между людьми и компьютерами, позволяя людям общаться с компьютерами в более понятной для человека форме. Часто такой язык помогает выбрать правильный метод решения проблемы. Прежде чем написать программу на языке высокого уровня, программист должен создать алгоритм решения проблемы, то есть пошаговый план действий, которые необходимо выполнить для решения этой проблемы. Именно поэтому языки, требующие предварительного составления алгоритма, часто называют алгоритмическими языками. Ассемблер Язык ассемблера - это символическое представление машинного языка. Он делает программирование проще, чем программирование в машинных кодах. Программисту не приходится использовать реальные адреса ячеек памяти с находящимися в них данными, участвующими в операции, и вычисленными результатами, а также адреса команд, к которым программа не обращается. Некоторые задачи, например, обмен с нестандартными устройствами обработки данных сложной структуры, не могут быть решены с помощью языков программирования высокого уровня. Язык Ассемблера - это машинный язык. И программист, реализующий любую задачу на языках высокого уровня, с помощью Ассемблера может определить, является ли решение этой задачи осмысленным, с точки зрения использования компьютера. Умение разобраться в языке Ассемблера облегчает поиск ошибок в программах, так как некоторые языки являются компиляторами. Лисп Lisp - второй старейший язык программирования (List Information Symbol Processing), был разработан Дж. Маккарти в 1962 году для обработки строк символов, а не чисел. Именно это назначение Лиспа открыло для программистов новую область деятельности, известную сегодня как “искусственный интеллект”. В настоящее время Lisp успешно используется в экспертных системах, аналитических вычислительных системах и т.д. Обширная область возможных применений Лиспа вызвала появление множества различных диалектов Лиспа, что привело к созданию в начале 1980-х годов Комитета Common LISP, который должен был выбрать наиболее подходящий диалект Лиспа и предложить его в качестве основного. Этот диалект, выбранный Комитетом в 1985 году, был назван Common LISP. С тех пор он был принят университетами США, а также многими разработчиками систем искусственного интеллекта в качестве основного диалекта языка Лисп. Первоначально Лисп задумывался как теоретический инструмент для рекурсивных конструкций, но сегодня он превратился в мощный инструмент, предоставляющий программисту разнообразную поддержку, позволяющую быстро создавать прототипы очень и очень серьезных систем. Профессор Дж. Самман из Массачусетского технологического института отметил, что математическая четкость и предельная ясность Лиспа - это еще не все. Главное, что …","date":1653717205,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653717205,"objectID":"f2fc1178eae09a83b84233ab4a51f481","permalink":"https://artyombabenko.github.io/ru/post/scientifi%D1%81_programming_languages/","publishdate":"2022-05-28T08:53:25+03:00","relpermalink":"/ru/post/scientifi%D1%81_programming_languages/","section":"post","summary":"Введение Прогресс компьютерной техники определил процесс появления новых разнообразных знаковых систем для записи алгоритмов - языков программирования. Смысл появления такого языка - оснащение набора вычислительных формул дополнительной информацией, превращение этого набора в алгоритм.","tags":[],"title":"Языки научного программирования","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"Моя прошлая неделя Эта неделя была не такой насыщенной, как предыдущие. На этой неделе у нас были последние уроки физкультуры и английского языка. Я сделал много лабораторных работ, снял много видеоотчетов. Я просмотрел много видео на youtube. Вот как прошла моя неделя. Итог недели Я думаю, что эта неделя была менее продуктивной, чем другие. На этой неделе я больше отдыхал, смотрел видео в интернете и спал. ","date":1653717145,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653717145,"objectID":"aa072bc3c4372b11619b699d37052449","permalink":"https://artyombabenko.github.io/ru/post/mylastweek4/","publishdate":"2022-05-28T08:52:25+03:00","relpermalink":"/ru/post/mylastweek4/","section":"post","summary":"В этом посте я бы хотел рассказать о моей последней неделе.","tags":[],"title":"Моя прошлая неделя","type":"post"},{"authors":null,"categories":null,"content":"По предмету “Операционные системы” я должен был выполнить проект - создать личный веб-сайт. Проект состоял из 6 этапов, на каждый из которых отводилась неделя. На этапах я должен был писать и создавать посты на различные темы, добавлять информацию о себе и т.д. Этапы проекта: 1) Размещение на странице Github заготовки для личного сайта. 2) Добавить данные о себе на сайт. Сделайте пост о прошедшей неделе и сделайте пост на тему по выбору. 3) Добавьте на сайт достижения. Сделайте сообщение за последнюю неделю и сделайте сообщение на выбранную тему. 4) Добавьте на сайт ссылки на научные и библиометрические ресурсы. Сделайте сообщение за последнюю неделю и оформите пост на выбранную тему. 5) Добавьте все остальные элементы на сайт. Сделайте сообщение за последнюю неделю и оформите пост на тему по выбору. 6) Разместите двуязычный сайт на Github. Сделайте сообщение за последнюю неделю и сделайте сообщение на выбранную тему (на двух языках). ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://artyombabenko.github.io/ru/project/example/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/project/example/","section":"project","summary":"Создание сайта","tags":["Deep Learning"],"title":"Индивидуальный проект Персональный сайт научного работника","type":"project"},{"authors":["Бабенко А.С."],"categories":[],"content":"Вступление Каждый из нас хотя бы раз попадал на выступление с невозможно скучной презентацией. Слайды были перегружены информацией, речь была монотонной, в зале стоял гул. Содержание таких выступлений исчезает из памяти через минуту после начала. Но не все презентации такие. Некоторые не выходят у меня из головы неделями, а слова из них вдохновляют меня на действия. Хорошая презентация понятна даже ребенку, красиво оформлена и в сочетании с сильной идеей может изменить мир. Как сделать красивую и интересную презентацию? Легче, чем кажется. Для этого не нужно быть дизайнером или Стивом Джобсом, достаточно следовать простым правилам и приемам из этой статьи. С их помощью вы сможете вдохновлять, доносить идеи и убеждать людей с помощью презентаций. А если время поджимает, используйте готовые шаблоны Canva - многое из того, о чем мы говорим ниже, уже есть в них. Как подготовить презентацию? Прежде чем сесть за редакторский стол, задайте себе несколько вопросов: Кто ваша аудитория? Какова основная идея презентации? Как вы будете ее доказывать? Что люди должны понять и сделать после ваших слов? Чем лучше вы подготовитесь перед выступлением, тем точнее будет ваше сообщение. Даже если презентацию будут смотреть онлайн, изучение адресатов и работа над структурой не пройдут даром. Основная идея В хороших презентациях всегда есть главная идея, которая красной нитью проходит через все выступление. Это может быть призыв, толчок к принятию решения или план. Без четкой идеи презентации становятся беспорядочными и запутанными, и слушателям бывает трудно понять, что хотел сказать автор. Основная идея должна быть короткой, простой и запоминающейся. В качестве девиза или слогана. Мечта - самая важная часть любой презентации. После того как вы найдете и выделите центральную идею, вы поймете, как создать презентацию вокруг нее. Проверьте каждый слайд вопросом: “Почему это важно для идеи?”. Таким образом, все, что не помогает раскрыть идею, просто останется за кадром. Структура Иногда даже сильные идеи теряются в презентациях с хаотичной структурой. Чтобы этого не произошло, расставьте все по местам заранее. Вот несколько способов, с помощью которых вы можете интересно донести основную идею: Начните с небольшой провокации; Укажите на проблему; Приведите доказательства и предложите решение; Расскажите историю и призовите к действию; Объясните сложное по принципу “Объясни будто мне 5 лет”; Дайте краткие выводы и мотивацию к работе с ними. Не обязательно использовать в презентации все шесть методов, для хорошей презентации будет достаточно любых трех. Как сделать крутую презентацию? Теперь, когда в аудитории полный порядок с идеями и содержанием, вы можете наконец-то взяться за слайды! Но сначала несколько советов. Не забывайте правило “один слайд - одна мысль”; Выбирайте шрифты sans-serif; Пишите крупно; Используйте яркие говорящие фотографии; Выбирайте классные шаблоны. Как рассказать о презентации? Если вы узнали аудиторию, сформулировали посыл и рассказали его простыми средствами, то ваша презентация уже круче, чем все, что можно найти в Интернете. Вы можете попробовать пойти дальше и придумать, как сделать презентацию еще лучше за счет крутой подачи. Репетируйте свою речь; Говорите медленно; Старайтесь уложиться в 10 минут; Используйте слайды в качестве фона; Учитесь у лучших. ","date":1653107215,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653107215,"objectID":"85be7a66d4732bff66807ee800f50862","permalink":"https://artyombabenko.github.io/ru/post/creating_presentations/","publishdate":"2022-05-21T07:26:55+03:00","relpermalink":"/ru/post/creating_presentations/","section":"post","summary":"Вступление Каждый из нас хотя бы раз попадал на выступление с невозможно скучной презентацией. Слайды были перегружены информацией, речь была монотонной, в зале стоял гул. Содержание таких выступлений исчезает из памяти через минуту после начала.","tags":[],"title":"Создание презентаций","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"Моя прошлая неделя Эта неделя получилась разнообразной. Я много занимался учебой, но и не забывал об отдыхе и развлечениях. У моей подруги был день рождения, и мы пошли на хоррор-квест. Мы получили незабываемые эмоции. Потом мы ели пиццу и гуляли в парке Горького до ночи. Итоги недели Я считаю, что эта неделя была продуктивной. Мне удалось найти баланс между учебой и отдыхом, поэтому неделя получилась отличной. ","date":1653106388,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653106388,"objectID":"7679dc8496a97e10a8c3e6e461f6221b","permalink":"https://artyombabenko.github.io/ru/post/lastweek3/","publishdate":"2022-05-21T07:13:08+03:00","relpermalink":"/ru/post/lastweek3/","section":"post","summary":"В этом посте я бы хотел рассказать о моей последней неделе.","tags":[],"title":"Прошлая неделя","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"Введение Markdown - это язык разметки текста, созданный писателем и блоггером Джоном Грубером. Он предназначен для создания красиво оформленных текстов в обычных файлах формата TXT. Вам не нужны громоздкие процессоры вроде Word или Pages, чтобы создавать документы с жирным или курсивным шрифтом, цитатами, ссылками и даже таблицами. Достаточно запомнить простые правила Markdown, и вы сможете писать даже в “Блокноте”. Хотя специализированные редакторы Markdown, конечно, гораздо удобнее. Где можно использовать Markdown Примечания: Редактор Markdown с файловой панелью (например, Atom или iA Writer) - вполне достойная альтернатива Evernote и OneNote. Мы уже писали, почему Markdown хорошо подходит для организации вашей базы заметок. Черновики для блога: Этот язык разметки совместим с кучей онлайн-редакторов и блог-платформ. Вы можете написать черновик для своего блога в Markdown, а затем опубликовать его за считанные секунды - все ссылки, заголовки и форматирование будут выглядеть так, как вы задумали. Это не для того, чтобы вы копировали из Word. Списки задач: В редакторах Markdown очень легко создавать списки покупок, списки дел и рабочих заданий. Некоторые гики используют обычный текстовый файл todo.txt в качестве альтернативы модным Wunderlist и Todoist. Как это сделать, можно узнать на сайте Todo.txt . Мессенджеры: Даже некоторые мессенджеры поддерживают Markdown. Например, в Telegram с его помощью можно применять жирное или курсивное выделение. Преимущества Markdown Универсальность: Документы, написанные с использованием синтаксиса Markdown, представляют собой обычные текстовые TXT-файлы. Их можно открыть на любой платформе и в любом редакторе. Этим они выгодно отличаются от файлов, созданных в текстовых процессорах. Пробовали ли вы открыть документ из Apple Pages в Word? Простота: Markdown настолько прост, что даже те, кто раньше не слышал про все эти ваши Latex и HTML, смогут освоить его за 10 минут. Сетки для подзаголовков, звездочки для выделения, тире для списков. Проще и быть не может. Большой выбор: инструментов редактирования для работы с документами Markdown очень и очень много. Есть онлайн, мобильные и настольные инструменты. Есть чудовищный Atom, красивые и минималистичные ghostwriter и iA Writer, Vim для гиков и Ulysses для профессиональных писателей. Я не хочу выбирать. Конвертируемость: Документы Markdown можно легко экспортировать в любые форматы: PDF, DOC, ODT. При этом их форматирование остается неизменным. Недостатки Markdown Ограниченное форматирование: Поскольку документы Markdown - это просто текстовые файлы, в них нельзя использовать красивые шрифты. В конце концов, это скорее инструмент для написания черновиков, чем для полноценной верстки. Строгие правила: В Markdown текст форматируется с помощью служебных символов. Один лишний символ * или #, и форматирование изменится. Поэтому при наборе текстов в Markdown нужно быть внимательным. Приложения для Markdown Вы можете легко выбрать свой любимый текстовый редактор из нашей подборки. Atom считается одним из лучших для Markdown - он хорош своей невероятной гибкостью и универсальностью. Он работает на Windows, macOS и Linux и имеет огромное количество тем и расширений. Из него очень легко собрать редактор мечты. Пользователям macOS стоит обратить внимание на красивые и удобные редакторы iA Writer, Write и Byword. ","date":1652543724,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652543724,"objectID":"a0ade9b4b218a8a455292eee739b86e8","permalink":"https://artyombabenko.github.io/ru/post/markdown/","publishdate":"2022-05-14T18:55:24+03:00","relpermalink":"/ru/post/markdown/","section":"post","summary":"Введение Markdown - это язык разметки текста, созданный писателем и блоггером Джоном Грубером. Он предназначен для создания красиво оформленных текстов в обычных файлах формата TXT. Вам не нужны громоздкие процессоры вроде Word или Pages, чтобы создавать документы с жирным или курсивным шрифтом, цитатами, ссылками и даже таблицами.","tags":[],"title":"Markdown","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"Моя прошлая неделя На этой неделе я сделал все, что планировал. Я сделал все лабораторные работы, решил тесты, сделал домашнее задание по английскому языку. Кроме того, я не забывал и об отдыхе. Мы с друзьями ходили в батутный парк. Результаты недели Я считаю, что эта неделя была продуктивной. Я выполнил все задания и успел отдохнуть, расслабиться и много поспать. Надеюсь, следующая неделя будет не менее продуктивной. ","date":1652543627,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652543627,"objectID":"a8e7b8b45d56bfa1ba4e0b6e9f564688","permalink":"https://artyombabenko.github.io/ru/post/last_week2/","publishdate":"2022-05-14T18:53:47+03:00","relpermalink":"/ru/post/last_week2/","section":"post","summary":"В этом посте я бы хотел рассказать о моей последней неделе.","tags":[],"title":"Моя прошлая неделя","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"Введение Скорость и качество сборки продукта являются основными конкурентными преимуществами в разработке программного обеспечения. Поэтому новая концепция CI/CD - Continuous integration and Continuous delivery - непрерывная интеграция и непрерывная доставка - начала вытеснять архаичные модели программирования, такие как императивная, структурная или модульная. Она помогает минимизировать ошибки, увеличить темпы сборки и качество разрабатываемого продукта. Что такое CI/CD CI/CD - это одна из практик DevOps, которая подразумевает непрерывную интеграцию и доставку. Этот набор принципов разработан для повышения удобства, частоты и надежности развертывания программного обеспечения или изменений продукта. CI/CD относится к agile-практикам и позволяет разработчикам уделять внимание реализации бизнес-требований, качеству кода и безопасности продукта. Цели CI/CD: обеспечение последовательного и автоматизированного способа сборки, упаковки и тестирования продуктов или приложений; автоматизация развертывания в различных средах; минимизация ошибок и проблем. Принципы CI/CD Существует четыре руководящих принципа CI/CD. 1)Разделение ответственности. Каждый из участников процесса разделяет ответственность за определенные этапы жизненного цикла продукта. Проектируется бизнес-логистика, реализуются сквозные функции, проводятся приемочные испытания и организуется логистика кода. 2)Снижение рисков. Каждая команда, участвующая в разработке продукта, стремится снизить риски - контролируется правильность бизнес-логистики, проверяется пользовательский опыт, улучшается хранение и обработка данных и т. д. 3)Сокращение цикла обратной связи. Разработчик и клиент должны стремиться к увеличению скорости внесения изменений и утверждения правок. Сборка и тестирование кода могут быть автоматизированы. А в ситуациях, когда требуется участие человека, можно минимизировать количество информационных посредников. 4)Реализация среды. Разработчики должны иметь общее рабочее пространство с основной и вспомогательной ветками для контроля версий и качества, приемлемости, отказоустойчивости и т.д. Этапы CI/CD Методология CI/CD предполагает разделение процесса разработки на семь этапов. 1)Написание кода. Разработчики пишут код своего модуля и проводят ручное тестирование. После этого результат работы соединяется в основной ветке с текущей версией проекта. После того как все коды модулей опубликованы в основной ветке, начинается второй этап. 2)Сборка. Выбранная система контроля версий инициирует автоматическую сборку и последующее тестирование проекта. Триггеры для активации сборки могут быть настроены самостоятельно. Для автоматизации сборки используется Jenkins или другой инструмент. 3)Ручное тестирование. После того как система CI проверит работоспособность тестовой версии, код передается для ручного исследования. 4)Релиз. После ручного тестирования в сборку вносятся исправления. Далее происходит выпуск версии кода для клиентов. 5)Развертывание. На этом этапе текущая (рабочая) версия кода размещается на производственных серверах разработчика. Клиент может взаимодействовать с программой и изучать ее функции. 6)Поддержка и мониторинг. Продукт начинает использоваться конечными пользователями. В то же время разработчики продолжают его поддерживать и анализировать работу пользователей. 7)Планирование. На основе пользовательского опыта разрабатывается новая функциональность и составляется план улучшений. После этого разработчик начинает писать код - и цикл замыкается. Плюсы и минусы CI/CD Минимальное время от запроса клиента до запуска в эксплуатацию. Методология сокращает время запуска обновлений до нескольких дней (в некоторых случаях - недель). Благодаря этому разработчики получают возможность быстрее тестировать инновации и внедрять решения быстрее конкурентов. Возможность проверять варианты. Оперативное тестирование и множество итераций помогают разработчику быстро выявить варианты, не имеющие перспектив, даже на начальных этапах. Качество результата. Проведение автоматизированного тестирования помогает выявить ошибки и другие проблемы на самых ранних стадиях разработки. При стандартном подходе к выпуску релизов это сделать сложно или невозможно. Требования к опыту. Теоретически все корпоративные ИТ-системы можно перевести на CI/CD. Но на практике, чтобы получить результат, необходим первичный опыт работы с методологией, а также правильная организация перестройки всех процессов. Сложность обеспечения взаимодействия. Непрерывное обновление и непрерывная доставка должны быть четко скоординированы, что возможно только после тщательной настройки взаимодействия между специалистами всех уровней. CI/CD - шумиха или необходимость? CI/CD - одна из самых хиповых методологий разработки ПО. Впервые идея ее внедрения была озвучена в 2006 году, а уже в 2008 году эксперты высказали мнение, что ее популярность связана с развитием облачных сервисов. В то же время желание использовать ее для решения других задач объясняется не популярностью, а преимуществами системы …","date":1651897757,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651897757,"objectID":"af20b768cd941fe42e989e01f9fdf70a","permalink":"https://artyombabenko.github.io/ru/post/tema2/","publishdate":"2022-05-07T07:29:17+03:00","relpermalink":"/ru/post/tema2/","section":"post","summary":"Введение Скорость и качество сборки продукта являются основными конкурентными преимуществами в разработке программного обеспечения. Поэтому новая концепция CI/CD - Continuous integration and Continuous delivery - непрерывная интеграция и непрерывная доставка - начала вытеснять архаичные модели программирования, такие как императивная, структурная или модульная.","tags":[],"title":"Непрерывная интеграция и непрерывное развертывание (CI/CD)","type":"post"},{"authors":["Бабенко А.С."],"categories":[],"content":"Моя последняя неделя За эту неделю я сделал почти все, что планировал. Я сделал все лабораторные работы по нескольким предметам, сходил с друзьями в парк развлечений, прочитал новую детективную книгу и посмотрел интересный фильм “Птичий короб”. Из всех запланированных дел я не смог изучить только английский язык. Итоги недели На мой взгляд, эта неделя была довольно продуктивной для меня. У меня не было времени сделать только одно запланированное дело. Я думаю, что такая ситуация произошла из-за того, что я очень много времени проводил в социальных сетях. Чтобы этого не повторилось, я должен следить за временем, которое я трачу в социальных сетях. ","date":1651894597,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651894597,"objectID":"72c233ac6818dc5afbf1d336d3768dca","permalink":"https://artyombabenko.github.io/ru/post/my-last-week1/","publishdate":"2022-05-07T06:36:37+03:00","relpermalink":"/ru/post/my-last-week1/","section":"post","summary":"В этом посте я бы хотел рассказать о том, как прошла моя последняя неделя.","tags":[],"title":"Моя прошлая неделя","type":"post"},{"authors":["Артём Сергеевич Бабенко","吳恩達"],"categories":["Demo","教程"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://artyombabenko.github.io/ru/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/ru/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}}\r{{% fragment %}} **Two** {{% /fragment %}}\r{{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne \rTwo \rThree \r A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://artyombabenko.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Артём Сергеевич Бабенко","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://artyombabenko.github.io/ru/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]